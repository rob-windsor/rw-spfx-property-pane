      <div class="${ styles.helloWorld99 }">
        <div class="${ styles.container }">
          <div class="${ styles.row }">
            <div class="${ styles.column }">
              <span class="${ styles.title }">Welcome to SharePoint!</span>
              <p class="${ styles.subTitle }">Customize SharePoint experiences using Web Parts.</p>
              <p class="${ styles.description }">${escape(this.properties.description)}</p>
              <a href="https://aka.ms/spfx" class="${ styles.button }">
                <span class="${ styles.label }">Learn more</span>
              </a>
            </div>
          </div>
        </div>
      </div>`;


***********************

Demo 1: New property


  ** HelloWorldWebPart

  color: string;

  **

<p class="${ styles.description }">${escape(this.properties.color)}</p>

  **

                PropertyPaneDropdown("color", {
                  label: "Color",
                  options: [
                    { key: "Red", text: "Red" },
                    { key: "Green", text: "Green" },
                    { key: "Blue", text: "Blue" }
                  ]
                })




  ** HelloWorldWebPart.manifest

      "color": "Blue"

***********************

Demo 2: Validation


  private validateDescription(value: string): string {
    let result = "";

    if (value == null || value.trim().length === 0) {
      result = "Please enter a description";
    }

    return result;
  } 

  **

                PropertyPaneTextField("description", {
                  label: strings.DescriptionFieldLabel,
                  onGetErrorMessage: this.validateDescription.bind(this)
                }),


***********************

Demo 3: Add Apply button


  protected get disableReactivePropertyChanges(): boolean {
    return true;
  }


***********************

Demo 4: Load options dynamically

  list: string;

  **

  private lists: IPropertyPaneDropdownOption[] = null;
  private listsDropdownDisabled: boolean = true;

  **

<p class="${ styles.description }">${escape(this.properties.list)}</p>

  **

                PropertyPaneDropdown("list", {
                  label: "List",
                  options: this.lists,
                  disabled: this.listsDropdownDisabled
                })   

  **

  private loadLists(): Promise<IPropertyPaneDropdownOption[]> {
    return new Promise<IPropertyPaneDropdownOption[]>((resolve: (options: IPropertyPaneDropdownOption[]) => void, reject: (error: any) => void) => {
      setTimeout((): void => {
        resolve([{
          key: "b9762b33-e651-413a-9916-afb465b4ed42",
          text: "Shared Documents"
        },
        {
          key: "7a31cac5-8cef-41a8-91ad-41e793ecd3ac",
          text: "Site Assets"
        }]);
      }, 2000);
    });
  }

  protected onPropertyPaneConfigurationStart(): void {
    if (this.lists) {
      return;
    }

    this.listsDropdownDisabled = true;

    this.loadLists()
      .then((listOptions: IPropertyPaneDropdownOption[]): void => {
        this.lists = listOptions;
        this.listsDropdownDisabled = false;
        this.context.propertyPane.refresh();
        this.render();
      });
  }

***********************

Demo 5: Use SharePoint data


import {
  SPHttpClient
} from '@microsoft/sp-http';

export interface IList {
  Id: string;
  Title: string;
}

export interface IListCollection {
  value: IList[];
}


**

  private loadLists(): Promise<IPropertyPaneDropdownOption[]> {
    return new Promise<IPropertyPaneDropdownOption[]>((resolve: (options: IPropertyPaneDropdownOption[]) => void, reject: (error: any) => void) => {
      let restUrl = this.context.pageContext.web.absoluteUrl +
        "/_api/web/lists?$filter=(Hidden eq false)";

      this.context.spHttpClient.get(restUrl, SPHttpClient.configurations.v1)
        .then((response) => {
          if (response.ok) {
            response.json().then((data: IListCollection) => {
              let result = data.value.map((list) => {
                return {key: list.Id, text: list.Title};
              });

              resolve(result);
            });
          } else {
            response.text().then((errorMessage) => {
              reject(errorMessage);
            });
          }
        });
    });
  }

***********************

Demo 6: Use SPFx Property Pane Controls


npm install @pnp/spfx-property-controls --save --save-exact

**

  users: IPropertyFieldGroupOrPerson[];

**
              <p class="${ styles.description}">${escape(this.getUserName())}</p>


**

  private getUserName(): string {
    let result = null;

    if (this.properties.users && this.properties.users.length == 1) {
      result = this.properties.users[0].fullName;
    }

    return result;
  }


**


                PropertyFieldPeoplePicker('users', {
                  label: 'User',
                  initialData: this.properties.users,
                  allowDuplicate: false,
                  multiSelect: false,
                  principalType: [PrincipalType.Users, PrincipalType.SharePoint, PrincipalType.Security],
                  onPropertyChange: this.onPropertyPaneFieldChanged,
                  context: this.context,
                  properties: this.properties,
                  onGetErrorMessage: null,
                  deferredValidationTime: 0,
                  key: 'peopleFieldId'
                })


***********************

Demo 7: Handling property value changes


  private previousUserName: string = null;

**
    let currentUserName = this.getUserName();
    if (currentUserName != this.previousUserName) {
      alert("Selected user changed to " + currentUserName);
      this.previousUserName = currentUserName;
    }


**

  protected onPropertyPaneFieldChanged(propertyPath: string, oldValue: any, newValue: any): void {
    super.onPropertyPaneFieldChanged(propertyPath, oldValue, newValue);

    debugger;
  }



